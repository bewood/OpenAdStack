//-----------------------------------------------------------------------
// <copyright file="ActivityWorkItemProcessor.cs" company="Rare Crowds Inc">
// Copyright 2012-2013 Rare Crowds, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
//-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Reflection;

using Activities;
using Diagnostics;
using Queuing;
using Utilities.Storage;
using WorkItems;

namespace ActivityProcessor
{
    /// <summary>Processes work items from a queue as activities</summary>
    public class ActivityWorkItemProcessor : IWorkItemProcessor
    {
        /// <summary>Maximum length of the activity request/result included in log messages</summary>
        private const int MaxActivityContentLogLength = 5000;

        /// <summary>Dictionary of loaded activities</summary>
        private readonly Dictionary<string, Activity> activities = new Dictionary<string, Activity>();

        /// <summary>Queuer used for queuing new activity work items</summary>
        private readonly IQueuer queuer;

        /// <summary>Initializes a new instance of the ActivityWorkItemProcessor class.</summary>
        /// <param name="activityProviders">Providers of activity types and their contexts</param>
        /// <param name="queuer">Queuer used to enqueue new requests generated by the activities</param>
        public ActivityWorkItemProcessor(IActivityProvider[] activityProviders, IQueuer queuer)
        {
            this.queuer = queuer;

            // Load activities from the activity providers
            LogManager.Log(
                LogLevels.Information,
                "Loading Activities from: {0}",
                string.Join(", ", activityProviders.Select(p => p.GetType().FullName)));

            foreach (var provider in activityProviders)
            {
                foreach (var activityType in provider.ActivityTypes)
                {
                    if (!typeof(Activity).IsAssignableFrom(activityType) || activityType.IsAbstract)
                    {
                        var message = string.Format(CultureInfo.InvariantCulture, "Invalid Activity: The type '{0}' is not a valid Activity or is abstract.", activityType.FullName);
                        LogManager.Log(LogLevels.Error, message);
                        throw new InvalidCastException(message);
                    }

                    var activity = Activity.CreateActivity(activityType, provider.ActivityContext, this.SubmitActivityRequest);

                    if (this.activities.ContainsKey(activity.Name))
                    {
                        var message = string.Format(CultureInfo.InvariantCulture, "Duplicate Activity '{0}': An activity with the name '{1}' has already been loaded.", activityType.FullName, activity.Name);
                        LogManager.Log(LogLevels.Error, message);
                        throw new InvalidCastException(message);
                    }

                    this.activities.Add(activity.Name, activity);
                }
            }

            LogManager.Log(
                LogLevels.Trace,
                "Loaded {0} Activities from {1} providers:\n{2}",
                this.activities.Count(),
                activityProviders.Length,
                string.Join(", ", activityProviders.Select(p => p.GetType().FullName)));
        }

        /// <summary>
        /// Processes a work item using an activity
        /// The work item's content is an xml serialized ActivityRequest.
        /// After processing, the work item's result is an xml serialized ActivityResult
        /// </summary>
        /// <param name="workItem">The work item to process</param>
        /// <exception cref="System.ArgumentException">
        /// The workItem.Id or workItem.Content is null or empty.
        /// No activity corresponding to the request.Task exists.
        /// </exception>
        public void ProcessWorkItem(ref WorkItem workItem)
        {
            if (workItem == null)
            {
                throw new ArgumentNullException("workItem");
            }

            if (string.IsNullOrWhiteSpace(workItem.Id))
            {
                throw new ArgumentException("Missing workItem.Id", "workItem");
            }

            if (string.IsNullOrWhiteSpace(workItem.Content))
            {
                throw new ArgumentException("Missing workItem.Content", "workItem");
            }

            var request = ActivityRequest.DeserializeFromXml(workItem.Content);
            LogManager.Log(
                LogLevels.Trace,
                "Processing workitem {0} - ActivityRequest:\n{1}",
                workItem.Id,
                workItem.Content.Substring(0, Math.Min(workItem.Content.Length, 5000)));

            if (!this.ActivityExists(request.Task))
            {
                var message = "Unknown activity: '{0}' for work item '{1}'".FormatInvariant(request.Task, request.Id);
                LogManager.Log(LogLevels.Error, message);
                throw new ArgumentException(message, "workItem");
            }

            // Process the activity request
            var result = this.activities[request.Task].Run(request);
            workItem.Result = result.SerializeToXml();
            workItem.Status = WorkItemStatus.Processed;
            LogManager.Log(
                LogLevels.Trace,
                "Processed workitem {0} - ActivityResult:\n{1}",
                workItem.Id,
                workItem.Result.Substring(0, Math.Min(workItem.Result.Length, 5000)));

            // Check if the request came from an activity
            if (workItem.ResultType == WorkItemResultType.Direct)
            {
                LogManager.Log(
                    LogLevels.Trace,
                    "Processing result for workitem '{0}' submitted by activity '{1}'.",
                    workItem.Id,
                    workItem.Source);

                if (!this.ActivityExists(workItem.Source))
                {
                    LogManager.Log(
                        LogLevels.Error,
                        "Unable to process result for work item '{0}'. Unknown activity: '{1}'.",
                        workItem.Id,
                        workItem.Source);
                    return;
                }

                // Call the source activity's result handler
                this.activities[workItem.Source].OnActivityResult(result);
                workItem.Status = WorkItemStatus.Completed;
            }

            // Set the work item status to failed if the activity was not successful.
            workItem.Status = result.Succeeded ? workItem.Status : WorkItemStatus.Failed;
        }

        /// <summary>Submits an activity request from within an activity</summary>
        /// <param name="request">The request to submit</param>
        /// <param name="sourceName">The source of the request</param>
        /// <returns>True if the work item was successfully submitted; otherwise, false</returns>
        private bool SubmitActivityRequest(ActivityRequest request, string sourceName)
        {
            if (!this.ActivityExists(request.Task))
            {
                LogManager.Log(
                    LogLevels.Error,
                    "Request submitted by '{0}' for unknown activity '{1}'",
                    sourceName,
                    request.Task);
                return false;
            }

            var activity = this.activities[request.Task];
            var workItem = new WorkItem
            {
                Id = request.Id,
                Category = activity.RuntimeCategory.ToString(),
                Source = sourceName,
                ResultType = WorkItemResultType.Direct,
                Content = request.SerializeToXml()
            };

            return this.queuer.EnqueueWorkItem(ref workItem);
        }

        /// <summary>Gets whether an activity exists</summary>
        /// <param name="activityName">Name of the activity</param>
        /// <returns>True if the activity exists; otherwise, false.</returns>
        private bool ActivityExists(string activityName)
        {
            return !string.IsNullOrEmpty(activityName) ?
                this.activities.ContainsKey(activityName) :
                false;
        }
    }
}
